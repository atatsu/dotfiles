set t_Co=256
set nocp

set softtabstop=4
set shiftwidth=4
set autoindent
set hidden	    "buffers keep change history
set scrolloff=3	    "keep 3 lines below and above cursor

" filetype plugins
filetype on
filetype plugin on
filetype plugin indent on

" Display
set number
:syntax on
set background=dark
colorscheme BusyBee
"colorscheme herald
set foldmethod=indent
set foldlevel=100
set nowrap
set hlsearch
set cursorline

" Autocomplete features in the status bar
set wildmenu

"""" statusline
set statusline=%t[%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%m%r%y%=%c,%l/%L\ %P\ %{fugitive#statusline()}
set laststatus=2

"""" Djagno snippets
autocmd FileType python set ft=python.django
autocmd FileType html set ft=htmldjango.html

"""" PySmell
"autocmd FileType python setlocal omnifunc=pysmell#Complete

"""" MiniBufExplorer
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1 

"""" SuperTab
let g:SuperTabDefaultCompletionType = 'context'
"let g:SuperTabDefaultCompletionType = "<C-x><C-o>"

"""" completion menu tweaks
set completeopt=longest,menuone

"""" TagList
let Tlist_WinWidth = 50
let Tlist_Exit_OnlyWindow = 1
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_File_Fold_Auto_Close = 1
let Tlist_Close_On_Select = 1
let Tlist_Sort_Type = 'name'
"map P :TlistToggle<CR>
map <leader>t :TlistToggle<CR>

"""" TaskList
"map T :TaskList<CR>

"""" NERDTree
let NERDTreeQuitOnOpen = 1
let NERDTreeWinSize = 50
let NERDTreeIgnore=['\.pyc$', '\.vim$', '\~$']
map <leader>n :NERDTreeToggle<CR>
"map ob :NERDTreeFromBookmark 

"""" Rope
map <leader>j :RopeGotoDefinition<CR>
map <leader>r :RopeRename<CR>

"""" BufExplorer
map <leader>b :BufExplorer<CR>

"""" Key Mappings
" bind ctrl+space for omnicompletion
inoremap <Nul> <C-x><C-o>
" Use tab and shift-tab to indent in normal mode
"nmap <Tab> >>
"nmap <S-Tab> <<
" Code folding toggle
nmap <CR> za 
" git diff
nnoremap <silent> <F10> :w<CR>:!git diff %<CR>
" bash
nnoremap <silent> <F3> :w<CR>:!zsh<CR>

"""" Trac Servers
let g:tracServerList = {}
" let g:tracServerList['(Server Name)'] = 'http://(user):(password)@(trac serverpath)/login/xmlrpc' 

call pathogen#infect()

"""" VirtualEnv
py << EOF
import os
import sys
import vim
project_base_dir = None
if 'virtualenv' in os.listdir('.'):
    project_base_dir = os.path.join(os.path.abspath('.'), 'virtualenv')
elif 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
if project_base_dir:
    sys.path.insert(0, project_base_dir)
    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    execfile(activate_this, dict(__file__=activate_this))
EOF

